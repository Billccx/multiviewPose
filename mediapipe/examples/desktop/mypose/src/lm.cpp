// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mediapipe/framework/formats/landmark.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fformats_2flandmark_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fformats_2flandmark_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h> // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mediapipe_2fframework_2fformats_2flandmark_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal
{
    class AnyMetadata;
} // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mediapipe_2fframework_2fformats_2flandmark_2eproto
{
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6] PROTOBUF_SECTION_VARIABLE(protodesc_cold);
    static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
    static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
    static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mediapipe_2fframework_2fformats_2flandmark_2eproto;
namespace mediapipe
{
    class Landmark;
    struct LandmarkDefaultTypeInternal;
    extern LandmarkDefaultTypeInternal _Landmark_default_instance_;
    class LandmarkList;
    struct LandmarkListDefaultTypeInternal;
    extern LandmarkListDefaultTypeInternal _LandmarkList_default_instance_;
    class LandmarkListCollection;
    struct LandmarkListCollectionDefaultTypeInternal;
    extern LandmarkListCollectionDefaultTypeInternal _LandmarkListCollection_default_instance_;
    class NormalizedLandmark;
    struct NormalizedLandmarkDefaultTypeInternal;
    extern NormalizedLandmarkDefaultTypeInternal _NormalizedLandmark_default_instance_;
    class NormalizedLandmarkList;
    struct NormalizedLandmarkListDefaultTypeInternal;
    extern NormalizedLandmarkListDefaultTypeInternal _NormalizedLandmarkList_default_instance_;
    class NormalizedLandmarkListCollection;
    struct NormalizedLandmarkListCollectionDefaultTypeInternal;
    extern NormalizedLandmarkListCollectionDefaultTypeInternal _NormalizedLandmarkListCollection_default_instance_;
} // namespace mediapipe
PROTOBUF_NAMESPACE_OPEN
template <>
::mediapipe::Landmark *Arena::CreateMaybeMessage<::mediapipe::Landmark>(Arena *);
template <>
::mediapipe::LandmarkList *Arena::CreateMaybeMessage<::mediapipe::LandmarkList>(Arena *);
template <>
::mediapipe::LandmarkListCollection *Arena::CreateMaybeMessage<::mediapipe::LandmarkListCollection>(Arena *);
template <>
::mediapipe::NormalizedLandmark *Arena::CreateMaybeMessage<::mediapipe::NormalizedLandmark>(Arena *);
template <>
::mediapipe::NormalizedLandmarkList *Arena::CreateMaybeMessage<::mediapipe::NormalizedLandmarkList>(Arena *);
template <>
::mediapipe::NormalizedLandmarkListCollection *Arena::CreateMaybeMessage<::mediapipe::NormalizedLandmarkListCollection>(Arena *);
PROTOBUF_NAMESPACE_CLOSE

namespace mediapipe
{

    // ===================================================================

    class Landmark final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.Landmark) */
    {
    public:
        inline Landmark() : Landmark(nullptr) {}
        ~Landmark() override;
        explicit constexpr Landmark(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        Landmark(const Landmark &from);
        Landmark(Landmark &&from) noexcept
            : Landmark()
        {
            *this = ::std::move(from);
        }

        inline Landmark &operator=(const Landmark &from)
        {
            CopyFrom(from);
            return *this;
        }
        inline Landmark &operator=(Landmark &&from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &unknown_fields() const
        {
            return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
        }
        inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields()
        {
            return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const Landmark &default_instance()
        {
            return *internal_default_instance();
        }
        static inline const Landmark *internal_default_instance()
        {
            return reinterpret_cast<const Landmark *>(
                &_Landmark_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
            0;

        friend void swap(Landmark &a, Landmark &b)
        {
            a.Swap(&b);
        }
        inline void Swap(Landmark *other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(Landmark *other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        Landmark *New(::PROTOBUF_NAMESPACE_ID::Arena *arena = nullptr) const final
        {
            return CreateMaybeMessage<Landmark>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const Landmark &from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const Landmark &from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message *to, const ::PROTOBUF_NAMESPACE_ID::Message &from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
        uint8_t *_InternalSerialize(
            uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(Landmark *other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "mediapipe.Landmark";
        }

    protected:
        explicit Landmark(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                          bool is_message_owned = false);

    private:
        static void ArenaDtor(void *object);
        inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kXFieldNumber = 1,
            kYFieldNumber = 2,
            kZFieldNumber = 3,
            kVisibilityFieldNumber = 4,
            kPresenceFieldNumber = 5,
        };
        // optional float x = 1;
        bool has_x() const;

    private:
        bool _internal_has_x() const;

    public:
        void clear_x();
        float x() const;
        void set_x(float value);

    private:
        float _internal_x() const;
        void _internal_set_x(float value);

    public:
        // optional float y = 2;
        bool has_y() const;

    private:
        bool _internal_has_y() const;

    public:
        void clear_y();
        float y() const;
        void set_y(float value);

    private:
        float _internal_y() const;
        void _internal_set_y(float value);

    public:
        // optional float z = 3;
        bool has_z() const;

    private:
        bool _internal_has_z() const;

    public:
        void clear_z();
        float z() const;
        void set_z(float value);

    private:
        float _internal_z() const;
        void _internal_set_z(float value);

    public:
        // optional float visibility = 4;
        bool has_visibility() const;

    private:
        bool _internal_has_visibility() const;

    public:
        void clear_visibility();
        float visibility() const;
        void set_visibility(float value);

    private:
        float _internal_visibility() const;
        void _internal_set_visibility(float value);

    public:
        // optional float presence = 5;
        bool has_presence() const;

    private:
        bool _internal_has_presence() const;

    public:
        void clear_presence();
        float presence() const;
        void set_presence(float value);

    private:
        float _internal_presence() const;
        void _internal_set_presence(float value);

    public:
        // @@protoc_insertion_point(class_scope:mediapipe.Landmark)
    private:
        class _Internal;

        template <typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        float x_;
        float y_;
        float z_;
        float visibility_;
        float presence_;
        friend struct ::TableStruct_mediapipe_2fframework_2fformats_2flandmark_2eproto;
    };
    // -------------------------------------------------------------------

    class LandmarkList final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.LandmarkList) */
    {
    public:
        inline LandmarkList() : LandmarkList(nullptr) {}
        ~LandmarkList() override;
        explicit constexpr LandmarkList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        LandmarkList(const LandmarkList &from);
        LandmarkList(LandmarkList &&from) noexcept
            : LandmarkList()
        {
            *this = ::std::move(from);
        }

        inline LandmarkList &operator=(const LandmarkList &from)
        {
            CopyFrom(from);
            return *this;
        }
        inline LandmarkList &operator=(LandmarkList &&from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &unknown_fields() const
        {
            return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
        }
        inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields()
        {
            return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const LandmarkList &default_instance()
        {
            return *internal_default_instance();
        }
        static inline const LandmarkList *internal_default_instance()
        {
            return reinterpret_cast<const LandmarkList *>(
                &_LandmarkList_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
            1;

        friend void swap(LandmarkList &a, LandmarkList &b)
        {
            a.Swap(&b);
        }
        inline void Swap(LandmarkList *other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(LandmarkList *other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        LandmarkList *New(::PROTOBUF_NAMESPACE_ID::Arena *arena = nullptr) const final
        {
            return CreateMaybeMessage<LandmarkList>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const LandmarkList &from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const LandmarkList &from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message *to, const ::PROTOBUF_NAMESPACE_ID::Message &from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
        uint8_t *_InternalSerialize(
            uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(LandmarkList *other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "mediapipe.LandmarkList";
        }

    protected:
        explicit LandmarkList(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                              bool is_message_owned = false);

    private:
        static void ArenaDtor(void *object);
        inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kLandmarkFieldNumber = 1,
        };
        // repeated .mediapipe.Landmark landmark = 1;
        int landmark_size() const;

    private:
        int _internal_landmark_size() const;

    public:
        void clear_landmark();
        ::mediapipe::Landmark *mutable_landmark(int index);
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::mediapipe::Landmark> *
        mutable_landmark();

    private:
        const ::mediapipe::Landmark &_internal_landmark(int index) const;
        ::mediapipe::Landmark *_internal_add_landmark();

    public:
        const ::mediapipe::Landmark &landmark(int index) const;
        ::mediapipe::Landmark *add_landmark();
        const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::mediapipe::Landmark> &
        landmark() const;

        // @@protoc_insertion_point(class_scope:mediapipe.LandmarkList)
    private:
        class _Internal;

        template <typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::mediapipe::Landmark> landmark_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_mediapipe_2fframework_2fformats_2flandmark_2eproto;
    };
    // -------------------------------------------------------------------

    class LandmarkListCollection final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.LandmarkListCollection) */
    {
    public:
        inline LandmarkListCollection() : LandmarkListCollection(nullptr) {}
        ~LandmarkListCollection() override;
        explicit constexpr LandmarkListCollection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        LandmarkListCollection(const LandmarkListCollection &from);
        LandmarkListCollection(LandmarkListCollection &&from) noexcept
            : LandmarkListCollection()
        {
            *this = ::std::move(from);
        }

        inline LandmarkListCollection &operator=(const LandmarkListCollection &from)
        {
            CopyFrom(from);
            return *this;
        }
        inline LandmarkListCollection &operator=(LandmarkListCollection &&from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &unknown_fields() const
        {
            return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
        }
        inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields()
        {
            return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const LandmarkListCollection &default_instance()
        {
            return *internal_default_instance();
        }
        static inline const LandmarkListCollection *internal_default_instance()
        {
            return reinterpret_cast<const LandmarkListCollection *>(
                &_LandmarkListCollection_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
            2;

        friend void swap(LandmarkListCollection &a, LandmarkListCollection &b)
        {
            a.Swap(&b);
        }
        inline void Swap(LandmarkListCollection *other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(LandmarkListCollection *other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        LandmarkListCollection *New(::PROTOBUF_NAMESPACE_ID::Arena *arena = nullptr) const final
        {
            return CreateMaybeMessage<LandmarkListCollection>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const LandmarkListCollection &from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const LandmarkListCollection &from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message *to, const ::PROTOBUF_NAMESPACE_ID::Message &from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
        uint8_t *_InternalSerialize(
            uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(LandmarkListCollection *other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "mediapipe.LandmarkListCollection";
        }

    protected:
        explicit LandmarkListCollection(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                                        bool is_message_owned = false);

    private:
        static void ArenaDtor(void *object);
        inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kLandmarkListFieldNumber = 1,
        };
        // repeated .mediapipe.LandmarkList landmark_list = 1;
        int landmark_list_size() const;

    private:
        int _internal_landmark_list_size() const;

    public:
        void clear_landmark_list();
        ::mediapipe::LandmarkList *mutable_landmark_list(int index);
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::mediapipe::LandmarkList> *
        mutable_landmark_list();

    private:
        const ::mediapipe::LandmarkList &_internal_landmark_list(int index) const;
        ::mediapipe::LandmarkList *_internal_add_landmark_list();

    public:
        const ::mediapipe::LandmarkList &landmark_list(int index) const;
        ::mediapipe::LandmarkList *add_landmark_list();
        const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::mediapipe::LandmarkList> &
        landmark_list() const;

        // @@protoc_insertion_point(class_scope:mediapipe.LandmarkListCollection)
    private:
        class _Internal;

        template <typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::mediapipe::LandmarkList> landmark_list_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_mediapipe_2fframework_2fformats_2flandmark_2eproto;
    };
    // -------------------------------------------------------------------

    class NormalizedLandmark final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.NormalizedLandmark) */
    {
    public:
        inline NormalizedLandmark() : NormalizedLandmark(nullptr) {}
        ~NormalizedLandmark() override;
        explicit constexpr NormalizedLandmark(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        NormalizedLandmark(const NormalizedLandmark &from);
        NormalizedLandmark(NormalizedLandmark &&from) noexcept
            : NormalizedLandmark()
        {
            *this = ::std::move(from);
        }

        inline NormalizedLandmark &operator=(const NormalizedLandmark &from)
        {
            CopyFrom(from);
            return *this;
        }
        inline NormalizedLandmark &operator=(NormalizedLandmark &&from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &unknown_fields() const
        {
            return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
        }
        inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields()
        {
            return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const NormalizedLandmark &default_instance()
        {
            return *internal_default_instance();
        }
        static inline const NormalizedLandmark *internal_default_instance()
        {
            return reinterpret_cast<const NormalizedLandmark *>(
                &_NormalizedLandmark_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
            3;

        friend void swap(NormalizedLandmark &a, NormalizedLandmark &b)
        {
            a.Swap(&b);
        }
        inline void Swap(NormalizedLandmark *other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(NormalizedLandmark *other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        NormalizedLandmark *New(::PROTOBUF_NAMESPACE_ID::Arena *arena = nullptr) const final
        {
            return CreateMaybeMessage<NormalizedLandmark>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const NormalizedLandmark &from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const NormalizedLandmark &from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message *to, const ::PROTOBUF_NAMESPACE_ID::Message &from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
        uint8_t *_InternalSerialize(
            uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(NormalizedLandmark *other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "mediapipe.NormalizedLandmark";
        }

    protected:
        explicit NormalizedLandmark(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                                    bool is_message_owned = false);

    private:
        static void ArenaDtor(void *object);
        inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kXFieldNumber = 1,
            kYFieldNumber = 2,
            kZFieldNumber = 3,
            kVisibilityFieldNumber = 4,
            kPresenceFieldNumber = 5,
        };
        // optional float x = 1;
        bool has_x() const;

    private:
        bool _internal_has_x() const;

    public:
        void clear_x();
        float x() const;
        void set_x(float value);

    private:
        float _internal_x() const;
        void _internal_set_x(float value);

    public:
        // optional float y = 2;
        bool has_y() const;

    private:
        bool _internal_has_y() const;

    public:
        void clear_y();
        float y() const;
        void set_y(float value);

    private:
        float _internal_y() const;
        void _internal_set_y(float value);

    public:
        // optional float z = 3;
        bool has_z() const;

    private:
        bool _internal_has_z() const;

    public:
        void clear_z();
        float z() const;
        void set_z(float value);

    private:
        float _internal_z() const;
        void _internal_set_z(float value);

    public:
        // optional float visibility = 4;
        bool has_visibility() const;

    private:
        bool _internal_has_visibility() const;

    public:
        void clear_visibility();
        float visibility() const;
        void set_visibility(float value);

    private:
        float _internal_visibility() const;
        void _internal_set_visibility(float value);

    public:
        // optional float presence = 5;
        bool has_presence() const;

    private:
        bool _internal_has_presence() const;

    public:
        void clear_presence();
        float presence() const;
        void set_presence(float value);

    private:
        float _internal_presence() const;
        void _internal_set_presence(float value);

    public:
        // @@protoc_insertion_point(class_scope:mediapipe.NormalizedLandmark)
    private:
        class _Internal;

        template <typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        float x_;
        float y_;
        float z_;
        float visibility_;
        float presence_;
        friend struct ::TableStruct_mediapipe_2fframework_2fformats_2flandmark_2eproto;
    };
    // -------------------------------------------------------------------

    class NormalizedLandmarkList final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.NormalizedLandmarkList) */
    {
    public:
        inline NormalizedLandmarkList() : NormalizedLandmarkList(nullptr) {}
        ~NormalizedLandmarkList() override;
        explicit constexpr NormalizedLandmarkList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        NormalizedLandmarkList(const NormalizedLandmarkList &from);
        NormalizedLandmarkList(NormalizedLandmarkList &&from) noexcept
            : NormalizedLandmarkList()
        {
            *this = ::std::move(from);
        }

        inline NormalizedLandmarkList &operator=(const NormalizedLandmarkList &from)
        {
            CopyFrom(from);
            return *this;
        }
        inline NormalizedLandmarkList &operator=(NormalizedLandmarkList &&from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &unknown_fields() const
        {
            return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
        }
        inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields()
        {
            return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const NormalizedLandmarkList &default_instance()
        {
            return *internal_default_instance();
        }
        static inline const NormalizedLandmarkList *internal_default_instance()
        {
            return reinterpret_cast<const NormalizedLandmarkList *>(
                &_NormalizedLandmarkList_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
            4;

        friend void swap(NormalizedLandmarkList &a, NormalizedLandmarkList &b)
        {
            a.Swap(&b);
        }
        inline void Swap(NormalizedLandmarkList *other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(NormalizedLandmarkList *other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        NormalizedLandmarkList *New(::PROTOBUF_NAMESPACE_ID::Arena *arena = nullptr) const final
        {
            return CreateMaybeMessage<NormalizedLandmarkList>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const NormalizedLandmarkList &from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const NormalizedLandmarkList &from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message *to, const ::PROTOBUF_NAMESPACE_ID::Message &from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
        uint8_t *_InternalSerialize(
            uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(NormalizedLandmarkList *other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "mediapipe.NormalizedLandmarkList";
        }

    protected:
        explicit NormalizedLandmarkList(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                                        bool is_message_owned = false);

    private:
        static void ArenaDtor(void *object);
        inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kLandmarkFieldNumber = 1,
        };
        // repeated .mediapipe.NormalizedLandmark landmark = 1;
        int landmark_size() const;

    private:
        int _internal_landmark_size() const;

    public:
        void clear_landmark();
        ::mediapipe::NormalizedLandmark *mutable_landmark(int index);
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::mediapipe::NormalizedLandmark> *
        mutable_landmark();

    private:
        const ::mediapipe::NormalizedLandmark &_internal_landmark(int index) const;
        ::mediapipe::NormalizedLandmark *_internal_add_landmark();

    public:
        const ::mediapipe::NormalizedLandmark &landmark(int index) const;
        ::mediapipe::NormalizedLandmark *add_landmark();
        const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::mediapipe::NormalizedLandmark> &
        landmark() const;

        // @@protoc_insertion_point(class_scope:mediapipe.NormalizedLandmarkList)
    private:
        class _Internal;

        template <typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::mediapipe::NormalizedLandmark> landmark_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_mediapipe_2fframework_2fformats_2flandmark_2eproto;
    };
    // -------------------------------------------------------------------

    class NormalizedLandmarkListCollection final : public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mediapipe.NormalizedLandmarkListCollection) */
    {
    public:
        inline NormalizedLandmarkListCollection() : NormalizedLandmarkListCollection(nullptr) {}
        ~NormalizedLandmarkListCollection() override;
        explicit constexpr NormalizedLandmarkListCollection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        NormalizedLandmarkListCollection(const NormalizedLandmarkListCollection &from);
        NormalizedLandmarkListCollection(NormalizedLandmarkListCollection &&from) noexcept
            : NormalizedLandmarkListCollection()
        {
            *this = ::std::move(from);
        }

        inline NormalizedLandmarkListCollection &operator=(const NormalizedLandmarkListCollection &from)
        {
            CopyFrom(from);
            return *this;
        }
        inline NormalizedLandmarkListCollection &operator=(NormalizedLandmarkListCollection &&from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet &unknown_fields() const
        {
            return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
        }
        inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet *mutable_unknown_fields()
        {
            return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor *descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor *GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection *GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const NormalizedLandmarkListCollection &default_instance()
        {
            return *internal_default_instance();
        }
        static inline const NormalizedLandmarkListCollection *internal_default_instance()
        {
            return reinterpret_cast<const NormalizedLandmarkListCollection *>(
                &_NormalizedLandmarkListCollection_default_instance_);
        }
        static constexpr int kIndexInFileMessages =
            5;

        friend void swap(NormalizedLandmarkListCollection &a, NormalizedLandmarkListCollection &b)
        {
            a.Swap(&b);
        }
        inline void Swap(NormalizedLandmarkListCollection *other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(NormalizedLandmarkListCollection *other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        NormalizedLandmarkListCollection *New(::PROTOBUF_NAMESPACE_ID::Arena *arena = nullptr) const final
        {
            return CreateMaybeMessage<NormalizedLandmarkListCollection>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const NormalizedLandmarkListCollection &from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const NormalizedLandmarkListCollection &from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message *to, const ::PROTOBUF_NAMESPACE_ID::Message &from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char *_InternalParse(const char *ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext *ctx) final;
        uint8_t *_InternalSerialize(
            uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const final;
        int GetCachedSize() const final { return _cached_size_.Get(); }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(NormalizedLandmarkListCollection *other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "mediapipe.NormalizedLandmarkListCollection";
        }

    protected:
        explicit NormalizedLandmarkListCollection(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                                                  bool is_message_owned = false);

    private:
        static void ArenaDtor(void *object);
        inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena *arena);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kLandmarkListFieldNumber = 1,
        };
        // repeated .mediapipe.NormalizedLandmarkList landmark_list = 1;
        int landmark_list_size() const;

    private:
        int _internal_landmark_list_size() const;

    public:
        void clear_landmark_list();
        ::mediapipe::NormalizedLandmarkList *mutable_landmark_list(int index);
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::mediapipe::NormalizedLandmarkList> *
        mutable_landmark_list();

    private:
        const ::mediapipe::NormalizedLandmarkList &_internal_landmark_list(int index) const;
        ::mediapipe::NormalizedLandmarkList *_internal_add_landmark_list();

    public:
        const ::mediapipe::NormalizedLandmarkList &landmark_list(int index) const;
        ::mediapipe::NormalizedLandmarkList *add_landmark_list();
        const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::mediapipe::NormalizedLandmarkList> &
        landmark_list() const;

        // @@protoc_insertion_point(class_scope:mediapipe.NormalizedLandmarkListCollection)
    private:
        class _Internal;

        template <typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::mediapipe::NormalizedLandmarkList> landmark_list_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_mediapipe_2fframework_2fformats_2flandmark_2eproto;
    };
    // ===================================================================

    // ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif // __GNUC__
    // Landmark

    // optional float x = 1;
    inline bool Landmark::_internal_has_x() const
    {
        bool value = (_has_bits_[0] & 0x00000001u) != 0;
        return value;
    }
    inline bool Landmark::has_x() const
    {
        return _internal_has_x();
    }
    inline void Landmark::clear_x()
    {
        x_ = 0;
        _has_bits_[0] &= ~0x00000001u;
    }
    inline float Landmark::_internal_x() const
    {
        return x_;
    }
    inline float Landmark::x() const
    {
        // @@protoc_insertion_point(field_get:mediapipe.Landmark.x)
        return _internal_x();
    }
    inline void Landmark::_internal_set_x(float value)
    {
        _has_bits_[0] |= 0x00000001u;
        x_ = value;
    }
    inline void Landmark::set_x(float value)
    {
        _internal_set_x(value);
        // @@protoc_insertion_point(field_set:mediapipe.Landmark.x)
    }

    // optional float y = 2;
    inline bool Landmark::_internal_has_y() const
    {
        bool value = (_has_bits_[0] & 0x00000002u) != 0;
        return value;
    }
    inline bool Landmark::has_y() const
    {
        return _internal_has_y();
    }
    inline void Landmark::clear_y()
    {
        y_ = 0;
        _has_bits_[0] &= ~0x00000002u;
    }
    inline float Landmark::_internal_y() const
    {
        return y_;
    }
    inline float Landmark::y() const
    {
        // @@protoc_insertion_point(field_get:mediapipe.Landmark.y)
        return _internal_y();
    }
    inline void Landmark::_internal_set_y(float value)
    {
        _has_bits_[0] |= 0x00000002u;
        y_ = value;
    }
    inline void Landmark::set_y(float value)
    {
        _internal_set_y(value);
        // @@protoc_insertion_point(field_set:mediapipe.Landmark.y)
    }

    // optional float z = 3;
    inline bool Landmark::_internal_has_z() const
    {
        bool value = (_has_bits_[0] & 0x00000004u) != 0;
        return value;
    }
    inline bool Landmark::has_z() const
    {
        return _internal_has_z();
    }
    inline void Landmark::clear_z()
    {
        z_ = 0;
        _has_bits_[0] &= ~0x00000004u;
    }
    inline float Landmark::_internal_z() const
    {
        return z_;
    }
    inline float Landmark::z() const
    {
        // @@protoc_insertion_point(field_get:mediapipe.Landmark.z)
        return _internal_z();
    }
    inline void Landmark::_internal_set_z(float value)
    {
        _has_bits_[0] |= 0x00000004u;
        z_ = value;
    }
    inline void Landmark::set_z(float value)
    {
        _internal_set_z(value);
        // @@protoc_insertion_point(field_set:mediapipe.Landmark.z)
    }

    // optional float visibility = 4;
    inline bool Landmark::_internal_has_visibility() const
    {
        bool value = (_has_bits_[0] & 0x00000008u) != 0;
        return value;
    }
    inline bool Landmark::has_visibility() const
    {
        return _internal_has_visibility();
    }
    inline void Landmark::clear_visibility()
    {
        visibility_ = 0;
        _has_bits_[0] &= ~0x00000008u;
    }
    inline float Landmark::_internal_visibility() const
    {
        return visibility_;
    }
    inline float Landmark::visibility() const
    {
        // @@protoc_insertion_point(field_get:mediapipe.Landmark.visibility)
        return _internal_visibility();
    }
    inline void Landmark::_internal_set_visibility(float value)
    {
        _has_bits_[0] |= 0x00000008u;
        visibility_ = value;
    }
    inline void Landmark::set_visibility(float value)
    {
        _internal_set_visibility(value);
        // @@protoc_insertion_point(field_set:mediapipe.Landmark.visibility)
    }

    // optional float presence = 5;
    inline bool Landmark::_internal_has_presence() const
    {
        bool value = (_has_bits_[0] & 0x00000010u) != 0;
        return value;
    }
    inline bool Landmark::has_presence() const
    {
        return _internal_has_presence();
    }
    inline void Landmark::clear_presence()
    {
        presence_ = 0;
        _has_bits_[0] &= ~0x00000010u;
    }
    inline float Landmark::_internal_presence() const
    {
        return presence_;
    }
    inline float Landmark::presence() const
    {
        // @@protoc_insertion_point(field_get:mediapipe.Landmark.presence)
        return _internal_presence();
    }
    inline void Landmark::_internal_set_presence(float value)
    {
        _has_bits_[0] |= 0x00000010u;
        presence_ = value;
    }
    inline void Landmark::set_presence(float value)
    {
        _internal_set_presence(value);
        // @@protoc_insertion_point(field_set:mediapipe.Landmark.presence)
    }

    // -------------------------------------------------------------------

    // LandmarkList

    // repeated .mediapipe.Landmark landmark = 1;
    inline int LandmarkList::_internal_landmark_size() const
    {
        return landmark_.size();
    }
    inline int LandmarkList::landmark_size() const
    {
        return _internal_landmark_size();
    }
    inline void LandmarkList::clear_landmark()
    {
        landmark_.Clear();
    }
    inline ::mediapipe::Landmark *LandmarkList::mutable_landmark(int index)
    {
        // @@protoc_insertion_point(field_mutable:mediapipe.LandmarkList.landmark)
        return landmark_.Mutable(index);
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::mediapipe::Landmark> *
    LandmarkList::mutable_landmark()
    {
        // @@protoc_insertion_point(field_mutable_list:mediapipe.LandmarkList.landmark)
        return &landmark_;
    }
    inline const ::mediapipe::Landmark &LandmarkList::_internal_landmark(int index) const
    {
        return landmark_.Get(index);
    }
    inline const ::mediapipe::Landmark &LandmarkList::landmark(int index) const
    {
        // @@protoc_insertion_point(field_get:mediapipe.LandmarkList.landmark)
        return _internal_landmark(index);
    }
    inline ::mediapipe::Landmark *LandmarkList::_internal_add_landmark()
    {
        return landmark_.Add();
    }
    inline ::mediapipe::Landmark *LandmarkList::add_landmark()
    {
        ::mediapipe::Landmark *_add = _internal_add_landmark();
        // @@protoc_insertion_point(field_add:mediapipe.LandmarkList.landmark)
        return _add;
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::mediapipe::Landmark> &
    LandmarkList::landmark() const
    {
        // @@protoc_insertion_point(field_list:mediapipe.LandmarkList.landmark)
        return landmark_;
    }

    // -------------------------------------------------------------------

    // LandmarkListCollection

    // repeated .mediapipe.LandmarkList landmark_list = 1;
    inline int LandmarkListCollection::_internal_landmark_list_size() const
    {
        return landmark_list_.size();
    }
    inline int LandmarkListCollection::landmark_list_size() const
    {
        return _internal_landmark_list_size();
    }
    inline void LandmarkListCollection::clear_landmark_list()
    {
        landmark_list_.Clear();
    }
    inline ::mediapipe::LandmarkList *LandmarkListCollection::mutable_landmark_list(int index)
    {
        // @@protoc_insertion_point(field_mutable:mediapipe.LandmarkListCollection.landmark_list)
        return landmark_list_.Mutable(index);
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::mediapipe::LandmarkList> *
    LandmarkListCollection::mutable_landmark_list()
    {
        // @@protoc_insertion_point(field_mutable_list:mediapipe.LandmarkListCollection.landmark_list)
        return &landmark_list_;
    }
    inline const ::mediapipe::LandmarkList &LandmarkListCollection::_internal_landmark_list(int index) const
    {
        return landmark_list_.Get(index);
    }
    inline const ::mediapipe::LandmarkList &LandmarkListCollection::landmark_list(int index) const
    {
        // @@protoc_insertion_point(field_get:mediapipe.LandmarkListCollection.landmark_list)
        return _internal_landmark_list(index);
    }
    inline ::mediapipe::LandmarkList *LandmarkListCollection::_internal_add_landmark_list()
    {
        return landmark_list_.Add();
    }
    inline ::mediapipe::LandmarkList *LandmarkListCollection::add_landmark_list()
    {
        ::mediapipe::LandmarkList *_add = _internal_add_landmark_list();
        // @@protoc_insertion_point(field_add:mediapipe.LandmarkListCollection.landmark_list)
        return _add;
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::mediapipe::LandmarkList> &
    LandmarkListCollection::landmark_list() const
    {
        // @@protoc_insertion_point(field_list:mediapipe.LandmarkListCollection.landmark_list)
        return landmark_list_;
    }

    // -------------------------------------------------------------------

    // NormalizedLandmark

    // optional float x = 1;
    inline bool NormalizedLandmark::_internal_has_x() const
    {
        bool value = (_has_bits_[0] & 0x00000001u) != 0;
        return value;
    }
    inline bool NormalizedLandmark::has_x() const
    {
        return _internal_has_x();
    }
    inline void NormalizedLandmark::clear_x()
    {
        x_ = 0;
        _has_bits_[0] &= ~0x00000001u;
    }
    inline float NormalizedLandmark::_internal_x() const
    {
        return x_;
    }
    inline float NormalizedLandmark::x() const
    {
        // @@protoc_insertion_point(field_get:mediapipe.NormalizedLandmark.x)
        return _internal_x();
    }
    inline void NormalizedLandmark::_internal_set_x(float value)
    {
        _has_bits_[0] |= 0x00000001u;
        x_ = value;
    }
    inline void NormalizedLandmark::set_x(float value)
    {
        _internal_set_x(value);
        // @@protoc_insertion_point(field_set:mediapipe.NormalizedLandmark.x)
    }

    // optional float y = 2;
    inline bool NormalizedLandmark::_internal_has_y() const
    {
        bool value = (_has_bits_[0] & 0x00000002u) != 0;
        return value;
    }
    inline bool NormalizedLandmark::has_y() const
    {
        return _internal_has_y();
    }
    inline void NormalizedLandmark::clear_y()
    {
        y_ = 0;
        _has_bits_[0] &= ~0x00000002u;
    }
    inline float NormalizedLandmark::_internal_y() const
    {
        return y_;
    }
    inline float NormalizedLandmark::y() const
    {
        // @@protoc_insertion_point(field_get:mediapipe.NormalizedLandmark.y)
        return _internal_y();
    }
    inline void NormalizedLandmark::_internal_set_y(float value)
    {
        _has_bits_[0] |= 0x00000002u;
        y_ = value;
    }
    inline void NormalizedLandmark::set_y(float value)
    {
        _internal_set_y(value);
        // @@protoc_insertion_point(field_set:mediapipe.NormalizedLandmark.y)
    }

    // optional float z = 3;
    inline bool NormalizedLandmark::_internal_has_z() const
    {
        bool value = (_has_bits_[0] & 0x00000004u) != 0;
        return value;
    }
    inline bool NormalizedLandmark::has_z() const
    {
        return _internal_has_z();
    }
    inline void NormalizedLandmark::clear_z()
    {
        z_ = 0;
        _has_bits_[0] &= ~0x00000004u;
    }
    inline float NormalizedLandmark::_internal_z() const
    {
        return z_;
    }
    inline float NormalizedLandmark::z() const
    {
        // @@protoc_insertion_point(field_get:mediapipe.NormalizedLandmark.z)
        return _internal_z();
    }
    inline void NormalizedLandmark::_internal_set_z(float value)
    {
        _has_bits_[0] |= 0x00000004u;
        z_ = value;
    }
    inline void NormalizedLandmark::set_z(float value)
    {
        _internal_set_z(value);
        // @@protoc_insertion_point(field_set:mediapipe.NormalizedLandmark.z)
    }

    // optional float visibility = 4;
    inline bool NormalizedLandmark::_internal_has_visibility() const
    {
        bool value = (_has_bits_[0] & 0x00000008u) != 0;
        return value;
    }
    inline bool NormalizedLandmark::has_visibility() const
    {
        return _internal_has_visibility();
    }
    inline void NormalizedLandmark::clear_visibility()
    {
        visibility_ = 0;
        _has_bits_[0] &= ~0x00000008u;
    }
    inline float NormalizedLandmark::_internal_visibility() const
    {
        return visibility_;
    }
    inline float NormalizedLandmark::visibility() const
    {
        // @@protoc_insertion_point(field_get:mediapipe.NormalizedLandmark.visibility)
        return _internal_visibility();
    }
    inline void NormalizedLandmark::_internal_set_visibility(float value)
    {
        _has_bits_[0] |= 0x00000008u;
        visibility_ = value;
    }
    inline void NormalizedLandmark::set_visibility(float value)
    {
        _internal_set_visibility(value);
        // @@protoc_insertion_point(field_set:mediapipe.NormalizedLandmark.visibility)
    }

    // optional float presence = 5;
    inline bool NormalizedLandmark::_internal_has_presence() const
    {
        bool value = (_has_bits_[0] & 0x00000010u) != 0;
        return value;
    }
    inline bool NormalizedLandmark::has_presence() const
    {
        return _internal_has_presence();
    }
    inline void NormalizedLandmark::clear_presence()
    {
        presence_ = 0;
        _has_bits_[0] &= ~0x00000010u;
    }
    inline float NormalizedLandmark::_internal_presence() const
    {
        return presence_;
    }
    inline float NormalizedLandmark::presence() const
    {
        // @@protoc_insertion_point(field_get:mediapipe.NormalizedLandmark.presence)
        return _internal_presence();
    }
    inline void NormalizedLandmark::_internal_set_presence(float value)
    {
        _has_bits_[0] |= 0x00000010u;
        presence_ = value;
    }
    inline void NormalizedLandmark::set_presence(float value)
    {
        _internal_set_presence(value);
        // @@protoc_insertion_point(field_set:mediapipe.NormalizedLandmark.presence)
    }

    // -------------------------------------------------------------------

    // NormalizedLandmarkList

    // repeated .mediapipe.NormalizedLandmark landmark = 1;
    inline int NormalizedLandmarkList::_internal_landmark_size() const
    {
        return landmark_.size();
    }
    inline int NormalizedLandmarkList::landmark_size() const
    {
        return _internal_landmark_size();
    }
    inline void NormalizedLandmarkList::clear_landmark()
    {
        landmark_.Clear();
    }
    inline ::mediapipe::NormalizedLandmark *NormalizedLandmarkList::mutable_landmark(int index)
    {
        // @@protoc_insertion_point(field_mutable:mediapipe.NormalizedLandmarkList.landmark)
        return landmark_.Mutable(index);
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::mediapipe::NormalizedLandmark> *
    NormalizedLandmarkList::mutable_landmark()
    {
        // @@protoc_insertion_point(field_mutable_list:mediapipe.NormalizedLandmarkList.landmark)
        return &landmark_;
    }
    inline const ::mediapipe::NormalizedLandmark &NormalizedLandmarkList::_internal_landmark(int index) const
    {
        return landmark_.Get(index);
    }
    inline const ::mediapipe::NormalizedLandmark &NormalizedLandmarkList::landmark(int index) const
    {
        // @@protoc_insertion_point(field_get:mediapipe.NormalizedLandmarkList.landmark)
        return _internal_landmark(index);
    }
    inline ::mediapipe::NormalizedLandmark *NormalizedLandmarkList::_internal_add_landmark()
    {
        return landmark_.Add();
    }
    inline ::mediapipe::NormalizedLandmark *NormalizedLandmarkList::add_landmark()
    {
        ::mediapipe::NormalizedLandmark *_add = _internal_add_landmark();
        // @@protoc_insertion_point(field_add:mediapipe.NormalizedLandmarkList.landmark)
        return _add;
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::mediapipe::NormalizedLandmark> &
    NormalizedLandmarkList::landmark() const
    {
        // @@protoc_insertion_point(field_list:mediapipe.NormalizedLandmarkList.landmark)
        return landmark_;
    }

    // -------------------------------------------------------------------

    // NormalizedLandmarkListCollection

    // repeated .mediapipe.NormalizedLandmarkList landmark_list = 1;
    inline int NormalizedLandmarkListCollection::_internal_landmark_list_size() const
    {
        return landmark_list_.size();
    }
    inline int NormalizedLandmarkListCollection::landmark_list_size() const
    {
        return _internal_landmark_list_size();
    }
    inline void NormalizedLandmarkListCollection::clear_landmark_list()
    {
        landmark_list_.Clear();
    }
    inline ::mediapipe::NormalizedLandmarkList *NormalizedLandmarkListCollection::mutable_landmark_list(int index)
    {
        // @@protoc_insertion_point(field_mutable:mediapipe.NormalizedLandmarkListCollection.landmark_list)
        return landmark_list_.Mutable(index);
    }
    inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::mediapipe::NormalizedLandmarkList> *
    NormalizedLandmarkListCollection::mutable_landmark_list()
    {
        // @@protoc_insertion_point(field_mutable_list:mediapipe.NormalizedLandmarkListCollection.landmark_list)
        return &landmark_list_;
    }
    inline const ::mediapipe::NormalizedLandmarkList &NormalizedLandmarkListCollection::_internal_landmark_list(int index) const
    {
        return landmark_list_.Get(index);
    }
    inline const ::mediapipe::NormalizedLandmarkList &NormalizedLandmarkListCollection::landmark_list(int index) const
    {
        // @@protoc_insertion_point(field_get:mediapipe.NormalizedLandmarkListCollection.landmark_list)
        return _internal_landmark_list(index);
    }
    inline ::mediapipe::NormalizedLandmarkList *NormalizedLandmarkListCollection::_internal_add_landmark_list()
    {
        return landmark_list_.Add();
    }
    inline ::mediapipe::NormalizedLandmarkList *NormalizedLandmarkListCollection::add_landmark_list()
    {
        ::mediapipe::NormalizedLandmarkList *_add = _internal_add_landmark_list();
        // @@protoc_insertion_point(field_add:mediapipe.NormalizedLandmarkListCollection.landmark_list)
        return _add;
    }
    inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::mediapipe::NormalizedLandmarkList> &
    NormalizedLandmarkListCollection::landmark_list() const
    {
        // @@protoc_insertion_point(field_list:mediapipe.NormalizedLandmarkListCollection.landmark_list)
        return landmark_list_;
    }

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif // __GNUC__
    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // @@protoc_insertion_point(namespace_scope)

} // namespace mediapipe

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mediapipe_2fframework_2fformats_2flandmark_2eproto
